@host = localhost
@port = 3000
@uri = http://{{host}}:{{port}}
@contentType = application/json

@thing = person:uv1o55sjes0tdpa31ool
@thingTobie = person:tobie
@token = eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE2NjIwNzU2MjksIm5iZiI6MTY2MjA3NTYyOSwiZXhwIjoxNjYzMjg1MjI5LCJpc3MiOiJTdXJyZWFsREIiLCJucyI6InRlc3QiLCJkYiI6InRlc3QiLCJzYyI6ImFsbHVzZXJzIiwiaWQiOiJ1c2VyOmhqeTBlYXIwa2VyczZtNXVoZjByIn0.7IwUtZtXshV-XuTERxaFhG-qpFkcsgwvXe6rW_lRQTg2RHwAz3hroVvlEeLDVumPloVa09sjepv_co0QunJD2w

### getHello
// @name getHello

GET {{uri}}
Content-Type: application/json

### init surrealDb database

### postInitDb
// @name postInitDb

POST {{uri}}/query
Content-Type: application/json

{
  // TODO: update with final initdb.sql file
  "sql": "DEFINE TABLE user SCHEMAFULL PERMISSIONS FOR select, update WHERE id = $auth.id, FOR create, delete NONE; DEFINE FIELD email ON user TYPE string; DEFINE FIELD pass ON user TYPE string; DEFINE FIELD settings.* ON user TYPE object; DEFINE FIELD settings.marketing ON user TYPE string; DEFINE FIELD tags ON user TYPE array; DEFINE INDEX idx_email ON user COLUMNS email UNIQUE; DEFINE SCOPE allusers SESSION 14d SIGNUP ( CREATE user SET settings.marketing = $marketing, email = $email, pass = crypto::argon2::generate($pass), tags = $tags ) SIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )" 
}

### surrealDb proxy methods

### postConnect
// @name postConnect

POST {{uri}}/connect
Content-Type: application/json

{
  "url": "http://127.0.0.1:8000/rpc"
}

### postClose
// @name postClose

POST {{uri}}/close
Content-Type: application/json

{
}

### postUse
// @name postUse

POST {{uri}}/use
Content-Type: application/json

{
  "ns": "test",
  "db": "test"
}

### postSignup
// @name postSignup

POST {{uri}}/signup
Content-Type: application/json

{
  "ns": "test",
  "db": "test",
  // We want to signup to the 'allusers' scope defined above
  "sc": "allusers",
  // We can add any variable here to use in the SIGNUP clause
  "email": "tobie@surrealdb.com",
  // We can add any variable here to use in the SIGNUP clause
  "pass": "some password",
  // We can add any variable here to use in the SIGNUP clause
  "marketing": true,
  // We can add any variable here to use in the SIGNUP clause
  "tags": ["rust", "golang", "javascript"]
}

### postSignin
// @name postSignin

POST {{uri}}/signin
Content-Type: application/json

{
  "ns": "test",
  "db": "test",
  // We want to signup to the 'allusers' scope defined above
  "sc": "allusers",
  // We can add any variable here to use in the SIGNUP clause
  "email": "tobie@surrealdb.com",
  // We can add any variable here to use in the SIGNUP clause
  "pass": "some password"
}

### postInvalidate
// @name postInvalidate

POST {{uri}}/invalidate
Content-Type: application/json

{
}

### postAuthenticate
// @name postAuthenticate

POST {{uri}}/authenticate
Content-Type: application/json

{
  "token": "{{token}}"
}

### postLet
// @name postLet

POST {{uri}}/let
Content-Type: application/json

{
  "key": "name",
  "value": {
    "name": {
      "first": "Tobie",
      "last": "Morgan Hitchcock"
    }
  }
}

### postQuery
// @name postQuery

POST {{uri}}/query
Content-Type: application/json

{
  "sql": "SELECT id, string::concat(name.first, ' ', name.last) AS name, age FROM $id;",
  "vars": {
    "id": "{{thing}}"
  }
  // "sql": "SELECT * FROM $auth"
  // "sql": "SELECT * FROM $session"
  // "sql": "SELECT * FROM $scope"
}

### getSelect
// @name getSelect

GET {{uri}}/{{thing}}
Content-Type: application/json

### postCreate
// @name postCreate

POST {{uri}}
Content-Type: application/json

{
  "id": "{{thing}}",
  "title": "Founder & CEO",
  "name": {
    "first": "Tobie",
    "last": "Morgan Hitchcock"
  },
  "marketing": true,
  "age": 28
}

### putUpdate
// @name putUpdate
// replace current record with payload data

PUT {{uri}}/{{thing}}
Content-Type: application/json

{
  "name": {
    "first": "MÃ¡rio",
    "last": "Monteiro"
  },
  "age": 50,
  "country": "Portugal"
}

### patchChange
// @name patchChange
// patches thing, update only sent properties leaving all others untoutched

PATCH {{uri}}/{{thing}}
Content-Type: application/json

{
  "name": {
    "first": "Tobie changed...",
    "last": "Morgan Hitchcock changed..."
  }
}

### patchModify
// @name patchModify
// modify replaces properties of record

PATCH {{uri}}/modify/{{thing}}
Content-Type: application/json

{
  "name": {
    "fullName": "Tobie Morgan Hitchcock"
  }
}

### deleteDelete
// @name deleteDelete

DELETE {{uri}}/{{thing}}
Content-Type: application/json

### postSync
// @name postSync
// TODO: sync, live, and kill aren't fully implemented yet

POST {{uri}}/sync
Content-Type: application/json

{
}

### postPing
// @name postPing
// ping is used internally. It doesn't need to be called from any client code

POST {{uri}}/ping
Content-Type: application/json

{
}

### postInfo
// @name postInfo

POST {{uri}}/info
Content-Type: application/json

{
}

### postLive
// @name postLive
// TODO: sync, live, and kill aren't fully implemented yet

POST {{uri}}/live
Content-Type: application/json

{
}

### postKill
// @name postKill
// TODO: sync, live, and kill aren't fully implemented yet

POST {{uri}}/kill
Content-Type: application/json

{
}

### TODO: model WIP

### postCreateModel
// @name postCreateModel

POST {{uri}}/person
Content-Type: application/json

{
  "id": "00001",
  "title": "Founder & CEO",
  "name": {
    "first": "Tobie",
    "last": "Morgan Hitchcock"
  },
  "marketing": true,
  "age": 28,
  "metaData": { "data": "tobie" },
  "metaDataInternal": { "data": "tobie internal" }
}

### getSelectModel
// @name getSelectModel

GET {{uri}}/person/{{thing}}
Content-Type: application/json